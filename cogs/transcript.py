import discord
from discord import app_commands
from discord.ext import commands
from datetime import datetime
import os

class TranscriptCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.guild_id = int(os.getenv("GUILD_ID"))
        self.log_channel_id = int(os.getenv("TRANSCRIPT_CHANNEL_ID"))

    @app_commands.command(name="transcript", description="Save the ticket chat log as a .txt")
    async def transcript(self, interaction: discord.Interaction):
        if not isinstance(interaction.channel, discord.Thread):
            await interaction.response.send_message("‚ùå This command must be used inside a thread.", ephemeral=True)
            return

        await interaction.response.defer(ephemeral=True)

        messages = []
        async for msg in interaction.channel.history(limit=100):
            messages.append(msg)
        messages.reverse()

        log_lines = []
        for msg in messages:
            ts = msg.created_at.strftime("%Y-%m-%d %H:%M")
            author = f"{msg.author.display_name} ({msg.author.name})"
            log_lines.append(f"[{ts}] {author}: {msg.content}")

        transcript_text = "\n".join(log_lines)
        file_name = f"transcript-{interaction.channel.name}.txt"

        with open(file_name, "w", encoding="utf-8") as f:
            f.write(transcript_text)

        # Envia para canal de log
        log_channel = interaction.guild.get_channel(self.log_channel_id)
        if log_channel:
            await log_channel.send(
                content=f"üìÅ Transcript from {interaction.channel.mention} generated by {interaction.user.mention}",
                file=discord.File(file_name)
            )
            await interaction.followup.send("‚úÖ Transcript sent to logs.", ephemeral=True)
        else:
            await interaction.followup.send("‚ö†Ô∏è Could not find the log channel.", ephemeral=True)

        os.remove(file_name)

    async def cog_load(self):
        guild = discord.Object(id=self.guild_id)
        self.bot.tree.add_command(self.transcript, guild=guild)

async def setup(bot):
    await bot.add_cog(TranscriptCog(bot))
